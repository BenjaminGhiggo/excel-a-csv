html:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>📂 Gestión de Archivos Excel</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome para íconos -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Estilos personalizados -->
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container my-5">
        <div class="text-center mb-5">
            <h1><i class="fas fa-folder-open"></i> Gestión de Archivos Excel</h1>
            <p class="lead">Sube, modifica y descarga en csv</p>
        </div>

        <!-- Subir archivo Excel -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-upload"></i> Subir Archivo Excel</h5>
                <input type="file" id="file-input" accept=".xlsx, .xls" class="form-control" />
                <div id="file-message" class="mt-2"></div>
            </div>
        </div>

        <!-- Previsualización del archivo -->
        <div class="card mb-4" id="preview-section" style="display:none;">
            <div class="card-body">
                <h5 class="card-title"><i class="fas fa-eye"></i> Previsualización de 5 filas</h5>
                <div class="table-responsive table-preview" id="table-container"></div>
            </div>
        </div>

        <!-- Acordeón para Eliminar Columnas y Agregar/Quitar Prefijos -->
        <div class="accordion mb-4" id="optionsAccordion" style="display:none;">
            <!-- Eliminar Columnas -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingDelete">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseDelete" aria-expanded="false" aria-controls="collapseDelete">
                        <i class="fas fa-trash-alt me-2"></i> Eliminar Columnas
                    </button>
                </h2>
                <div id="collapseDelete" class="accordion-collapse collapse" aria-labelledby="headingDelete" data-bs-parent="#optionsAccordion">
                    <div class="accordion-body">
                        <div class="row g-3 align-items-center">
                            <div class="col-md-6">
                                <label for="column-select" class="form-label">Selecciona la columna a eliminar</label>
                                <select id="column-select" class="form-select"></select>
                            </div>
                            <div class="col-md-6 d-flex align-items-end">
                                <button id="delete-column-btn" class="btn btn-danger me-2"><i class="fas fa-minus-circle"></i> Eliminar</button>
                                <button id="undo-delete-column-btn" class="btn btn-secondary"><i class="fas fa-undo"></i> Revertir Eliminación</button>
                            </div>
                        </div>
                        <div id="delete-message" class="mt-3"></div>
                    </div>
                </div>
            </div>

            <!-- Agregar/Quitar Prefijos -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingPrefix">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePrefix" aria-expanded="false" aria-controls="collapsePrefix">
                        <i class="fas fa-link me-2"></i> Agregar/Quitar Prefijos
                    </button>
                </h2>
                <div id="collapsePrefix" class="accordion-collapse collapse" aria-labelledby="headingPrefix" data-bs-parent="#optionsAccordion">
                    <div class="accordion-body">
                        <div class="row g-3 align-items-center">
                            <div class="col-md-4">
                                <label for="prefix-column-select" class="form-label">Selecciona la columna</label>
                                <select id="prefix-column-select" class="form-select"></select>
                            </div>
                            <div class="col-md-4">
                                <label for="prefix-input" class="form-label">Prefijo</label>
                                <input type="text" id="prefix-input" class="form-control" placeholder="Escribe el prefijo" />
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <button id="add-prefix-btn" class="btn btn-primary me-2"><i class="fas fa-plus-circle"></i> Agregar Prefijo</button>
                                <button id="remove-prefix-btn" class="btn btn-warning me-2"><i class="fas fa-minus-circle"></i> Quitar Prefijo</button>
                                <button id="undo-prefix-btn" class="btn btn-secondary"><i class="fas fa-undo"></i> Revertir Prefijo</button>
                            </div>
                        </div>
                        <div id="prefix-message" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Guardar archivo CSV -->
        <div class="card mb-4" id="download-section" style="display:none;">
            <div class="card-body text-center">
                <h5 class="card-title"><i class="fas fa-download"></i> Descargar Archivo Modificado</h5>
                <button id="download-btn" class="btn btn-success btn-lg"><i class="fas fa-file-csv"></i> Descargar CSV por comas</button>
            </div>
        </div>
    </div>

    <!-- Overlay de Carga -->
    <div id="loader-overlay" class="loader-overlay" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-3">Procesando, por favor espera...</p>
    </div>

    <!-- Bootstrap JS y dependencias -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Librerías necesarias -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- Script personalizado -->
    <script src="app.js"></script>
</body>
</html>

styles.css:
/* Fuente base */
*{
    font: 400 16px 'Signika', sans-serif;
}

body{
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: flex-start;
    min-height: 100vh;
    background-color: #f8f9fa;
}

.container{
    padding: 64px;
    position: relative;
}

.btn, .status{
    padding: 8px 16px;
    color: #fff;
    border-radius: 4px;
}

.btn{
    background: #2f4ad0;
    box-shadow: 0 8px 6px -6px #555;
    transition: all .4s ease;
}

.btn:hover{
    letter-spacing: 2px;
    box-shadow: none;
}

.txt{
    margin-left: 10px;
}

#succes, .loader{
    background: #fff;
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: 1;
}

#succes{
    top: 50%;
    left: 50%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transform: translate(-50%, -50%) scale(0, 0);
    transition: transform 0.3s ease-in-out;
}

#succes.active{
    transform: translate(-50%, -50%) scale(1, 1);
}

#succes a{
    position: absolute;
    top: 8px;
    right: 8px;
    color: #000;
    font-size: 24px;
    text-decoration: none;
}

.status{
    background: #2fb65a;
    padding: 10px 20px;
}

.loader{
    margin-top: 20px;
}

.loader::before{
    content: '';
    display: block;
    width: 100px;
    height: 10px;
    background: #e0e0e0;
    border-radius: 5px;
    overflow: hidden;
    position: relative;
}

.loader::after{
    content: '0%';
    position: absolute;
    top: -30px;
    left: 0;
    width: 0%;
    height: 100%;
    background: #2fb65a;
    transition: width 10s linear;
}

.loader.active::after{
    width: 100%;
}

#succes:target{
    transform: translate(-50%, -50%) scale(1, 1);
}

.loader-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255,255,255,0.8);
    z-index: 9999;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

@media (max-width: 768px) {
    .table-preview {
        max-height: 200px;
    }
}


app.js:
// Variables de estado
let originalData = [];
let modifiedData = [];
let deletedColumns = [];
let prefixedColumns = {};
let isHeader = false;
let fileName = "";

// Elementos del DOM
const fileInput = document.getElementById('file-input');
const fileMessage = document.getElementById('file-message');
const previewSection = document.getElementById('preview-section');
const tableContainer = document.getElementById('table-container');
const optionsAccordion = document.getElementById('optionsAccordion');
const deleteColumnSection = document.getElementById('delete-column-section');
const columnSelect = document.getElementById('column-select');
const deleteColumnBtn = document.getElementById('delete-column-btn');
const undoDeleteColumnBtn = document.getElementById('undo-delete-column-btn');
const deleteMessage = document.getElementById('delete-message');
const prefixSection = document.getElementById('prefix-section');
const prefixColumnSelect = document.getElementById('prefix-column-select');
const prefixInput = document.getElementById('prefix-input');
const addPrefixBtn = document.getElementById('add-prefix-btn');
const removePrefixBtn = document.getElementById('remove-prefix-btn');
const undoPrefixBtn = document.getElementById('undo-prefix-btn');
const prefixMessage = document.getElementById('prefix-message');
const downloadSection = document.getElementById('download-section');
const downloadBtn = document.getElementById('download-btn');
const loaderOverlay = document.getElementById('loader-overlay');

// Función para detectar si la primera fila es encabezado
function detectHeader(data) {
    const firstRow = data[0];
    return firstRow.every(cell => typeof cell === 'string');
}

// Función para renderizar la tabla
function renderTable(data) {
    let table = '<table class="table table-bordered table-hover"><thead><tr>';
    data[0].forEach(header => {
        table += `<th>${header}</th>`;
    });
    table += '</tr></thead><tbody>';
    // Mostrar solo las primeras 5 filas y permitir scroll para el resto
    const rowsToShow = data.slice(0, 6); // 1 fila de encabezado + 5 filas de datos
    for (let i = 1; i < rowsToShow.length; i++) {
        table += '<tr>';
        rowsToShow[i].forEach(cell => {
            table += `<td>${cell}</td>`;
        });
        table += '</tr>';
    }
    table += '</tbody></table>';
    tableContainer.innerHTML = table;
}

// Función para actualizar los select de columnas
function updateColumnSelects() {
    // Limpiar opciones
    columnSelect.innerHTML = '';
    prefixColumnSelect.innerHTML = '';

    // Agregar nuevas opciones
    modifiedData[0].forEach((col, index) => {
        const option = document.createElement('option');
        option.value = index;
        option.text = col;
        columnSelect.appendChild(option);

        const optionPrefix = document.createElement('option');
        optionPrefix.value = index;
        optionPrefix.text = col;
        prefixColumnSelect.appendChild(optionPrefix);
    });
}

// Función para mostrar mensajes con Bootstrap
function showMessage(element, message, type) {
    element.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
}

// Función para mostrar el loader
function showLoader() {
    loaderOverlay.style.display = 'flex';
}

// Función para ocultar el loader
function hideLoader() {
    loaderOverlay.style.display = 'none';
}

// Evento al subir archivo
fileInput.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (file) {
        fileName = file.name;
        showLoader(); // Mostrar loader durante el procesamiento

        const reader = new FileReader();
        reader.onload = (evt) => {
            const data = new Uint8Array(evt.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const firstSheet = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[firstSheet];
            let jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            if (jsonData.length === 0) {
                showMessage(fileMessage, '❌ El archivo está vacío.', 'danger');
                hideLoader();
                return;
            }
            isHeader = detectHeader(jsonData);
            if (isHeader) {
                showMessage(fileMessage, '✅ Se detectó que la primera fila es un encabezado y se utilizó como tal.', 'success');
            } else {
                showMessage(fileMessage, 'ℹ️ La primera fila no parece ser un encabezado. Se asignaron nombres genéricos a las columnas para ayudarte.', 'warning');
                // Asignar nombres genéricos
                const numCols = jsonData[0].length;
                const genericHeaders = [];
                for (let i = 0; i < numCols; i++) {
                    genericHeaders.push(`Columna ${i + 1}`);
                }
                jsonData[0] = genericHeaders;
            }

            // Crear encabezados al estilo Excel sin eliminar nombres originales
            const originalHeaders = jsonData[0];
            const excelHeaders = originalHeaders.map((name, i) => `${String.fromCharCode(65 + i)} (${name})`);
            jsonData[0] = excelHeaders;

            originalData = JSON.parse(JSON.stringify(jsonData)); // Copiar datos originales
            modifiedData = JSON.parse(JSON.stringify(jsonData));
            deletedColumns = [];
            prefixedColumns = {};

            // Mostrar secciones
            previewSection.style.display = 'block';
            optionsAccordion.style.display = 'block';
            downloadSection.style.display = 'block';

            renderTable(modifiedData);
            updateColumnSelects();

            hideLoader(); // Ocultar loader después del procesamiento
        };
        reader.readAsArrayBuffer(file);
    }
});

// Evento para eliminar columna
deleteColumnBtn.addEventListener('click', () => {
    const colIndex = parseInt(columnSelect.value);
    if (isNaN(colIndex)) {
        showMessage(deleteMessage, '❌ Selecciona una columna válida.', 'danger');
        return;
    }
    const colName = modifiedData[0][colIndex];
    // Guardar columna eliminada
    const deletedCol = modifiedData.map(row => row[colIndex]);
    deletedColumns.push({ name: colName, data: deletedCol, index: colIndex });
    // Eliminar columna
    modifiedData = modifiedData.map(row => row.filter((_, idx) => idx !== colIndex));
    showMessage(deleteMessage, `✅ Columna '${colName}' eliminada.`, 'success');
    renderTable(modifiedData);
    updateColumnSelects();
});

// Evento para revertir eliminación de columna
undoDeleteColumnBtn.addEventListener('click', () => {
    if (deletedColumns.length === 0) {
        showMessage(deleteMessage, '⚠️ No hay columnas para restaurar.', 'warning');
        return;
    }
    const lastDeleted = deletedColumns.pop();
    // Insertar columna en su posición original
    modifiedData.forEach((row, idx) => {
        row.splice(lastDeleted.index, 0, lastDeleted.data[idx]);
    });
    showMessage(deleteMessage, `✅ Columna '${lastDeleted.name}' restaurada.`, 'success');
    renderTable(modifiedData);
    updateColumnSelects();
});

// Evento para agregar prefijo
addPrefixBtn.addEventListener('click', () => {
    const colIndex = parseInt(prefixColumnSelect.value);
    const prefix = prefixInput.value.trim();
    if (isNaN(colIndex) || prefix === "") {
        showMessage(prefixMessage, '❌ Selecciona una columna válida y escribe un prefijo.', 'danger');
        return;
    }
    const colName = modifiedData[0][colIndex];
    if (!prefixedColumns[colName]) {
        // Guardar estado original
        prefixedColumns[colName] = modifiedData.map(row => row[colIndex]);
    }
    // Agregar prefijo
    modifiedData.forEach((row, idx) => {
        if (idx === 0) return; // Encabezado
        row[colIndex] = prefix + row[colIndex];
    });
    showMessage(prefixMessage, `✅ Prefijo '${prefix}' agregado a la columna '${colName}'.`, 'success');
    renderTable(modifiedData);
});

// Evento para quitar prefijo
removePrefixBtn.addEventListener('click', () => {
    const colIndex = parseInt(prefixColumnSelect.value);
    const prefix = prefixInput.value.trim();
    if (isNaN(colIndex) || prefix === "") {
        showMessage(prefixMessage, '❌ Selecciona una columna válida y escribe un prefijo.', 'danger');
        return;
    }
    const colName = modifiedData[0][colIndex];
    // Verificar si todos los valores empiezan con el prefijo
    let allHavePrefix = true;
    for (let i = 1; i < modifiedData.length; i++) {
        if (!modifiedData[i][colIndex].startsWith(prefix)) {
            allHavePrefix = false;
            break;
        }
    }
    if (!allHavePrefix) {
        showMessage(prefixMessage, `⚠️ No todos los valores en la columna '${colName}' tienen el prefijo '${prefix}'.`, 'warning');
        return;
    }
    if (!prefixedColumns[colName]) {
        // Guardar estado original
        prefixedColumns[colName] = modifiedData.map(row => row[colIndex]);
    }
    // Quitar prefijo
    modifiedData.forEach((row, idx) => {
        if (idx === 0) return; // Encabezado
        row[colIndex] = row[colIndex].substring(prefix.length);
    });
    showMessage(prefixMessage, `✅ Prefijo '${prefix}' eliminado de la columna '${colName}'.`, 'success');
    renderTable(modifiedData);
});

// Evento para revertir prefijo
undoPrefixBtn.addEventListener('click', () => {
    const colIndex = parseInt(prefixColumnSelect.value);
    if (isNaN(colIndex)) {
        showMessage(prefixMessage, '❌ Selecciona una columna válida.', 'danger');
        return;
    }
    const colName = modifiedData[0][colIndex];
    if (!prefixedColumns[colName]) {
        showMessage(prefixMessage, '⚠️ No hay prefijos para revertir en esta columna.', 'warning');
        return;
    }
    // Revertir a estado original
    modifiedData.forEach((row, idx) => {
        row[colIndex] = prefixedColumns[colName][idx];
    });
    delete prefixedColumns[colName];
    showMessage(prefixMessage, `✅ Prefijo revertido para la columna '${colName}'.`, 'success');
    renderTable(modifiedData);
});

// Evento para descargar archivo modificado
downloadBtn.addEventListener('click', () => {
    showLoader(); // Mostrar loader durante la generación del CSV

    let csvContent = "";
    modifiedData.forEach((rowArray) => {
        // Escapar comillas dobles en los valores y delimitar por comas
        let row = rowArray.map(cell => `"${cell.replace(/"/g, '""')}"`).join(",");
        csvContent += row + "\r\n";
    });

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const downloadLink = document.createElement("a");
    const url = URL.createObjectURL(blob);
    downloadLink.href = url;
    downloadLink.download = "archivo_modificado.csv";
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);

    hideLoader(); // Ocultar loader después de la descarga
});
